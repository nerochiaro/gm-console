<!DOCTYPE html>
<html>
<head>
  <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel="stylesheet">
  <link href="https://unpkg.com/vuetify/dist/vuetify.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
  <style>
      #map { position:absolute; top:80px; bottom:0; width:100%; }
      canvas { width: 280px; height: 100% }
  </style>
</head>
<body>
    <div id="app">
      <v-app>
        <v-toolbar app>
          <v-toolbar-title>Game Master Console</v-toolbar-title>
        </v-toolbar>
        <v-navigation-drawer app permanent>
            <transition-group name="players" tag="div" v-on:after-enter="playerIn">
            <v-card hover class="ml-2 mr-2 mt-2" :data-player="player.name.toLowerCase()"
                    v-for="player in players" v-bind:key="player.name.toLowerCase()">
               <v-card-title primary-title>
                 <div>
                   <h3 class="headline mb-0">Player {{player.name}}</h3>
                   <div><strong>Orientation:</strong> x: {{player.orient.x.toFixed(3)}},
                                                      y: {{player.orient.y.toFixed(3)}},
                                                      z: {{player.orient.z.toFixed(3)}}</div>
                 </div>
               </v-card-title>
               <canvas :ref="'scene-'+player.name.toLowerCase()" @wheel="zoomPlayer($event, player)"></canvas>
               <v-card-actions>
                 <v-btn color="orange" @click="playAudio(player)">Play Audio</v-btn>
               </v-card-actions>
             </v-card>
             </transition-group>
        </v-navigation-drawer>
        <v-content>
          <v-container fluid>
            <div id="map"></div>
          </v-container>
        </v-content>
        <v-footer></v-footer>
      </v-app>
    </div>

  <script src="https://unpkg.com/vue/dist/vue.js"></script>
  <script src="https://unpkg.com/vuetify/dist/vuetify.js"></script>
  <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js"></script>
  <script src="OBJLoader.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.6/chroma.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="comms.js"></script>
  <script src="render.js"></script>
  <script>
    var comms = null;
    var render = null;
    new Vue({
        el: '#app',
        data: {
          map: null,
          socket: null,
          players: {

          }
      },
      mounted: function() {
          comms = new Comms(this);
          render = new Render(this);
          this.initMap();
        },
      methods: {
          initMap: function() {
              this.socket = io();
              this.map = L.map('map');
              this.tileLayer = L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}', {
                  id: 'mapbox.satellite',
                  accessToken: 'pk.eyJ1IjoibmVyb2NoaWFybyIsImEiOiJjajlzbTdpbWUzajloMndtdjZwNXJ5aHc4In0.xkn1OOeUQuNm8HDSrI6qhg'
              });
              this.tileLayer.addTo(this.map);
              this.map.on('load', comms.connect);
              this.map.setView([41.380772, 2.16809], 12);
          },
          init3D: function(playerKey) {
              // for some reason the reference is returned as an 1-element array
              var canvas = this.$refs['scene-'+playerKey][0];
              render.init(canvas, this.players[playerKey], 280, 160);
          },
          playAudio: function(player) { comms.playAudio(player) },
          zoomPlayer: function(e, player) {
              player.render.zoom += e.deltaY / 3;
              if (player.render.zoom == 0) player.render.zoom = e.deltaY > 0 ? 1 : -1;
              render.adjustZoom(player);
          },
          playerIn: function(element) {
              console.log("Player joining:", element.dataset.player);
              this.init3D(element.dataset.player);
          }
      }
  });
  </script>
</body>
</html>
