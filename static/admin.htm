<!DOCTYPE html>
<html>
<head>
  <link href='https://fonts.googleapis.com/css?family=Roboto:300,400,500,700|Material+Icons' rel="stylesheet">
  <link href="https://unpkg.com/vuetify/dist/vuetify.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, minimal-ui">
  <style>
      #map { position:absolute; top:80px; bottom:0; width:100%; }
      canvas { width: 280px; height: 100% }
  </style>
</head>
<body>
    <div id="app">
      <v-app>
        <v-toolbar app>
          <v-toolbar-title>Game Master Console // Settings</v-toolbar-title>
        </v-toolbar>
        <v-content>
          <v-container fluid>
              <transition-group name="players" tag="div" v-on:after-enter="playerIn">
              <v-card hover class="ml-2 mr-2 mt-2" :data-player="player.name.toLowerCase()"
                      v-for="player in players" v-bind:key="player.name.toLowerCase()" width="460px">
                  <v-toolbar>
                    <v-toolbar-title>Player {{player.name}}</v-toolbar-title>
                    <v-spacer></v-spacer>
                    <v-progress-circular :size="40" :width="4" :value="player.calibration.system * 33.333" color="teal" class="mr-2">{{ player.calibration.system }}</v-progress-circular>
                    <v-progress-circular :size="40" :width="4" :value="player.calibration.gyro * 33.333" color="teal" class="mr-2">{{ player.calibration.gyro }}</v-progress-circular>
                    <v-progress-circular :size="40" :width="4" :value="player.calibration.accel * 33.333" color="teal" class="mr-2">{{ player.calibration.accel }}</v-progress-circular>
                    <v-progress-circular :size="40" :width="4" :value="player.calibration.mag * 33.333" color="teal" class="mr-2">{{ player.calibration.mag }}</v-progress-circular>
                  </v-toolbar>
                  <v-card-actions>
                      <v-icon :color="player.mic.interrupt ? 'red' : 'grey'">volume_up</v-icon>
                      <v-progress-linear buffer v-model="player.mic.value" :buffer-value="config.mic_threshold / 10"></v-progress-linear>
                      <v-checkbox disabled color="red" class="mt-4"
                                  v-for="interrupt in player.interrupts" v-model="interrupt.done"></v-checkbox>
                  </v-card-actions>
                  <canvas :ref="'scene-'+player.name.toLowerCase()"></canvas>
                  <v-card-actions>
                      <v-btn @click="clear_interrupts(player)"><v-icon>volume_off</v-icon> Clear micrphone events</v-btn>
                      <v-btn @click="calculate_adjust(player)"><v-icon>accessibility</v-icon> Align model</v-btn>
                  </v-card-actions>
               </v-card>
               </transition-group>
          </v-container>
        </v-content>
        <v-footer></v-footer>
      </v-app>
    </div>

  <script src="https://unpkg.com/vue/dist/vue.js"></script>
  <script src="https://unpkg.com/vuetify/dist/vuetify.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r79/three.min.js"></script>
  <script src="OBJLoader.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/1.3.6/chroma.min.js"></script>
  <script src="/socket.io/socket.io.js"></script>
  <script src="comms.js"></script>
  <script src="render.js"></script>
  <script>
    var comms = null;
    var render = null;
    new Vue({
        el: '#app',
        data: {
          socket: null,
          players: {  },
          config: {
              mic_threshold: 650
          }
      },
      mounted: function() {
          render = new Render(this);

          this.socket = io();
          comms = new Comms(this);
          comms.connect({no_map: true});
        },
      methods: {
          init3D: function(playerKey) {
              // for some reason the reference is returned as an 1-element array
              var canvas = this.$refs['scene-'+playerKey][0];
              render.init(canvas, this.players[playerKey], 280, 160);
          },
          zoomPlayer: function(e, player) {
              player.render.zoom += e.deltaY / 3;
              if (player.render.zoom == 0) player.render.zoom = e.deltaY > 0 ? 1 : -1;
              render.adjustZoom(player);
          },
          playerIn: function(element) {
              this.init3D(element.dataset.player);
          },
          calculate_adjust: function(player) {
              var current = new THREE.Quaternion(player.orient.x, player.orient.y, player.orient.z, player.orient.w);
              var adjust = current.conjugate();
              comms.send_adjust(player, adjust);
          },
          clear_interrupts: function(player) { comms.clear_interrupts(player); }
      }
  });
  </script>
</body>
</html>
